#version 430 core

uniform sampler2D uColorTexture;

in vec2 iTexcoord;

out vec4 oColor;

uniform int perm[512]; 
vec3 grad3[12] = 	vec3[12]( 
					vec3(1,1,0),vec3(-1,1,0),vec3(1,-1,0),vec3(-1,-1,0),
					vec3(1,0,1),vec3(-1,0,1),vec3(1,0,-1),vec3(-1,0,-1),
					vec3(0,1,1),vec3(0,-1,1),vec3(0,1,-1),vec3(0,-1,-1));


int fastfloor(float x) 
{
	return x>0 ? int(x) : int(x)-1;
}

float Noise(vec3 pos)
{
	const float F3 = 1.0f / 3.0f;
	const float G3 = 1.0f / 6.0f;

	float n0,n1,n2,n3;

	float s = (pos.x+pos.y+pos.z) * F3;
	ivec3 ijk = ivec3(fastfloor(pos.x + s) , fastfloor(pos.y + s) ,fastfloor(pos.z + s));

	float t = (ijk.x+ijk.y+ijk.z)*G3;
	vec3 XYZ0 = vec3(ijk.x,ijk.y,ijk.z) - t;
	vec3 xyz0 = pos - XYZ0;

	ivec3 ijk1;
    //int i1, j1, k1; 
 	int i2, j2, k2; 
 	if(xyz0.x>=xyz0.y)
 	{
 		if(xyz0.y>=xyz0.z){ ijk1.x=1;  ijk1.y=0; ijk1.z=0; i2=1; j2=1; k2=0; } 
 		else if(xyz0.x>=xyz0.z) {  ijk1.x=1; ijk1.y=0; ijk1.z=0; i2=1; j2=0; k2=1; } 
 		else {  ijk1.x=0; ijk1.y=0; ijk1.z=1; i2=1; j2=0; k2=1; } 
 	}
 	else 
 	{ // x0<y0
 		if(xyz0.y<xyz0.z) {  ijk1.x=0; ijk1.y=0; ijk1.z=1; i2=0; j2=1; k2=1; } 
 		else if(xyz0.x<xyz0.z) {  ijk1.x=0; ijk1.y=1; ijk1.z=0; i2=0; j2=1; k2=1; } 
 		else {  ijk1.x=0; ijk1.y=1; ijk1.z=0; i2=1; j2=1; k2=0; } 
 	}

 	float x1 = xyz0.x -  ijk1.x + G3;
 	float y1 = xyz0.y - ijk1.y + G3;
 	float z1 = xyz0.z - ijk1.z + G3;
 	float x2 = xyz0.x - i2 + 2.0f*G3; 
 	float y2 = xyz0.y - j2 + 2.0f*G3;
 	float z2 = xyz0.z - k2 + 2.0f*G3;
 	float x3 = xyz0.x - 1.0f + 3.0f*G3;
 	float y3 = xyz0.y - 1.0f + 3.0f*G3;
 	float z3 = xyz0.z - 1.0f + 3.0f*G3;

 	int ii = ijk.x & 255;
 	int jj = ijk.y & 255;
 	int kk = ijk.z & 255;
 	int gi0 = perm[ii+perm[jj+perm[kk]]] % 12;
 	int gi1 = perm[ii+ ijk1.x+perm[jj+ijk1.y+perm[kk+ijk1.z]]] % 12;
 	int gi2 = perm[ii+i2+perm[jj+j2+perm[kk+k2]]] % 12;
 	int gi3 = perm[ii+1+perm[jj+1+perm[kk+1]]] % 12;

 	float t0 = 0.6f - xyz0.x*xyz0.x - xyz0.y*xyz0.y - xyz0.z*xyz0.z;
 	if(t0<0) n0 = 0.0f;
 	else 
 	{
 		t0 *= t0;
 		n0 = t0 * t0 * dot(grad3[gi0], vec3(xyz0.x, xyz0.y, xyz0.z));
 	}
 	float t1 = 0.6f - x1*x1 - y1*y1 - z1*z1;
 	if(t1<0.0f) n1 = 0.0f;
 	else 
 	{
 		t1 *= t1;
 		n1 = t1 * t1 * dot(grad3[gi1],vec3( x1, y1, z1));
 	}
 	float t2 = 0.6f - x2*x2 - y2*y2 - z2*z2;
 	if(t2<0.0f) n2 = 0.0f;
 	else 
 	{
 		t2 *= t2;
 		n2 = t2 * t2 * dot(grad3[gi2], vec3(x2, y2, z2));
 	}
 	float t3 = 0.6f - x3*x3 - y3*y3 - z3*z3;
 	if(t3<0.0f) n3 = 0.0f;
 	else 
 	{
 		t3 *= t3;
 		n3 = t3 * t3 * dot(grad3[gi3], vec3(x3, y3, z3));
 	}
 	return ((32.0f*(n0 + n1 + n2 + n3)) + 1.0f) * 0.5f;
}

float Fbm(vec3 pos, int octaves, float persistence) 
{
    float total = 0.0f;
    float frequency = 1.0f;
    float amplitude = 1.0f;
    float maxValue = 0.0f;  
    for(int i=0;i<octaves;i++) 
    {
        total += Noise(pos * frequency) * amplitude;
        maxValue += amplitude;
        amplitude *= persistence;
        frequency *= 2.0f;
    }
    return total/maxValue;
}

void main()
{
	vec3 pos = vec3(iTexcoord.x,iTexcoord.y,0.0f);
	float n = Fbm(pos * 20.0f,8,0.6f);
	oColor = vec4(n,0.0f,0.0f,1.0f);
}
/*
	terrain.TessControl
*/

#version 430 core

layout(vertices = 3) out;
layout(std140)uniform uPass
{
	mat4 uView;
	mat4 uProjection;
	vec3 uCampos;
	float uTime;
	float uCamnear;
	float uCamfar;
};

in vec3 iPosition[];
in vec2 iTexcoord[];
in vec3 iColor[];
in vec3 iSecondaryColor[];
in vec3 iNormal[];

out vec3 tcPosition[];
out vec2 tcTexcoord[];
out vec3 tcColor[];
out vec3 tcSecondaryColor[];

/*
float GetTess()
{
	float dist = distance(iPosition[0],uCampos);
	float fact = min(dist/1000.0f,1.0f);	
	return mix(1.0f,5.0f,fact);
}

void main()
{
	tcPosition[gl_InvocationID] = iPosition[gl_InvocationID];
	tcTexcoord[gl_InvocationID] = iTexcoord[gl_InvocationID];
	tcColor[gl_InvocationID] = iColor[gl_InvocationID];
	tcSecondaryColor[gl_InvocationID] = iSecondaryColor[gl_InvocationID];

	float t = GetTess();
	const float to = 1.0f;
	gl_TessLevelInner[0] = t;
	gl_TessLevelOuter[0] = to;
	gl_TessLevelOuter[1] = to;
	gl_TessLevelOuter[2] = to;
}
*/

float level (vec4 poz1, vec4 poz2)
{
	float lod=1;
	float d=distance(poz1, poz2);
	if(d<1000) lod=10;
	if(1000<=d && d<3000) lod=5;
	if(3000<=d && d<5000) lod=2;
	if(5000<=d) lod=1;

	return lod;
}

void main()
{
	tcPosition[gl_InvocationID] = iPosition[gl_InvocationID];
	tcTexcoord[gl_InvocationID] = iTexcoord[gl_InvocationID];
	tcColor[gl_InvocationID] = iColor[gl_InvocationID];
	tcSecondaryColor[gl_InvocationID] = iSecondaryColor[gl_InvocationID];

	if(gl_InvocationID == 0)
	{
		vec3 d1 = iPosition[1] + (iPosition[2] - iPosition[1]) / 2;
		vec3 d2 = iPosition[0] + (iPosition[2] - iPosition[0]) / 2;
		vec3 d3 = iPosition[0] + (iPosition[2] - iPosition[0]) / 2;

		float e0=level(vec4(d1,1.0),vec4(uCampos,1.0));
		float e1=level(vec4(d2,1.0),vec4(uCampos,1.0));
		float e2=level(vec4(d3,1.0),vec4(uCampos,1.0));
		float m=min(e0,min(e1,e2));

		gl_TessLevelInner[0] = floor((min(e0,min(e1,e2))+max(e0,max(e1,e2)))/2);
		gl_TessLevelOuter[0] = e0;
		gl_TessLevelOuter[1] = e1;
		gl_TessLevelOuter[2] = e2;
	}
}
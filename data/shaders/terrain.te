/*
	terrain.TessEval
*/

#version 430 core

layout(triangles, fractional_odd_spacing, ccw) in;
layout(std140)uniform uPass
{
	mat4 uView;
	mat4 uProjection;
	vec3 uCampos;
	float uTime;
	float uCamnear;
	float uCamfar;
};
uniform sampler2D uHeightMap;
uniform vec4 uClipPlane;

in vec3 tcPosition[];
in vec2 tcTexcoord[];
in vec3 tcColor[];
in vec3 tcSecondaryColor[];
in vec3 tcNormal[];

out vec3 iPosition;
out vec2 iTexcoord;
out vec3 iColor;
out vec3 iSecondaryColor;
out vec3 iClipPos;

vec2 Interpolate(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 Interpolate(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

float GetHeight(vec2 uv)
{ 
    // 200 = height scale
    // 14 = terrain scale UNIFORMS!
    return texture(uHeightMap,uv).x * 200.0f * 9.0f;
}

void main()
{
	iPosition = Interpolate(tcPosition[0],tcPosition[1],tcPosition[2]);
    iTexcoord = Interpolate(tcTexcoord[0],tcTexcoord[1],tcTexcoord[2]);
    iPosition.y = GetHeight(iTexcoord);
    iColor = Interpolate(tcColor[0],tcColor[1],tcColor[2]);
    iSecondaryColor = Interpolate(tcSecondaryColor[0],tcSecondaryColor[1],tcSecondaryColor[2]);

    gl_Position = uProjection * uView * vec4(iPosition, 1.0f);
    iClipPos = gl_Position.xyz;

    float clip = dot(vec4(iPosition,1.0f),uClipPlane);
    gl_ClipDistance[0] = clip;
    gl_ClipDistance[1] = clip;
    gl_ClipDistance[2] = clip;
}
